Wstep do jezyka Haskell

square n = n *n

square 5 -> 5 *5 -> 25 


square = lambda(n) n*n
sq  \n -> n *n

prod x y = x *y
prod 3 5 -> 3*5 -. 15
prod1(x,y) = x *y
prod1(3,5) -> 3 *5 ->15

5 :: Int

square :: Int -> Int

prod1 :: (Int, Int) => Int 

prod :: Int  => (Int  => Int)


(prod 3) 5 
Int  => Int 5 (to 5 jest argumentem funkcji)

(prod 3) :: Int  => Int(Currying)

(lambda x lambda y . x *y) 3 5
->(lambda y . 3*y) 5
-> 3 *5
--> 15

double.square x = square( square x)

double_square = square.square


f :: A  => B 
g :: B  => D 

g.f :: A -. d 

